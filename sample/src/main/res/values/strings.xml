<resources>
    <string name="app_name">Demo</string>
    <string name="experience">"项目经验1

* 名称：翼胜利

* 开发周期：3个月

* 开发工具：Android studio + git

* 项目描述：翼胜利是由深圳市网购潮科技有限公司开发，并由成都市翼胜利数码通讯运营的一款线上门店APP，翼胜利致力于为广大数码手机通讯消费者提供全面的、精准的线上信息和海量的专属特惠商品服务，只为促进中国手机通讯服务行业在线化、移动化、区域化、信息化的发展。

* 功能模块： 首页、商城、购物车、我

* 职责： 完成翼胜利'我' 模块，消息中心、客户服务、电子服务卡、地址管理、积分乐园模块中的任务中心、套餐查询、用户登录、忘记密码、修改密码、订单信息、我的订单待支付、待收货、已完成订单、物流信息等功能





* 技术要点：

1.底部导航栏采用Radiogroup + Fragment的框架来设计

2.建立基类LoadingPager，分别提供了加载中、加载失败、空视图、联网失败等页面展示，根据返回状态判断该显示哪个视图的逻辑处理。

3.自定义ListView控件--XListView 实现下拉刷新，上拉加载更多，配合后台数据实现分页加载数据。

4.引入开源框架ImageLoader实现图片的异步加载。



所遇问题：

加载服务器图片过多的时候遇到OOM问题，访问网络等待时间过长没响应的ANR问题。

解决方案：

对于ANR问题，不应该将耗时的操作放到主线程执行，可能会导致主线程的阻塞，从而导致程序的ANR，

异步开启子线程进行耗时的操作，通过Handler+Message在子线程发送消息到主线程进行更新UI。

2.对于加载图片过多时导致的OOM内存溢出问题，可以通过引入ImageLoader开源框架解决，       ImageLoader里的线程使用了线程池， 从而避免了过多的线程频繁的创建和销毁，如果每次总是new   一个线程去执行这是非常不可取的，好一点的可用AsyncTask类，其实其内部的实现也是用到了线程池。

在网络获取图片时，先是将其保存到sd卡，然后加载到内存，这么做的好处是加载到内存的时候做个压缩处理，以减少图片所占的内存。







项目经验2

* 名称：网购潮

* 开发周期：3个月

* 开发工具：Eclipse + SVN

* 项目描述：网购潮，你身边的正品实惠品牌特卖专家！

* 功能模块  首页、品牌特卖、金币商城、DIY、我

* 项目职责：网购潮app是公司原有的项目，根据产品的需求，由我们小组3人进行迭代开发，我主要负责金币商城模块、我这两个模块需求的修改。部分UI界面的美化！



* 技术要点：

1.底部导航栏采用Radiogroup + Fragment设计。采用一个Activity，多个Fragment 实现界面的切换。采用模板设计模式，用BaseFragment将每个页面的初始化页面和初始化数据的代码都写到 initView和initData 两个父类的抽象方法中，提高团队开发效率。

2.自定义ListView实现下拉刷新

3.使用第三方ShardSdk实现一键分享功能。"</string>
</resources>
